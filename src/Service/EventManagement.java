package Service;import Model.Event;import Model.Organizer;import Model.Venue;import Utility.Validator;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import java.util.Scanner;import java.util.stream.Collectors;public class EventManagement implements EventOperations {    private ArrayList<Event> events;    private ArrayList<Organizer> organizers;    private ArrayList<Venue> venues;    public EventManagement() {        this.events = new ArrayList<>();        this.organizers = new ArrayList<>();        this.venues = new ArrayList<>();    }    @Override    public void createEvent(Event event) {        events.add(event);    }    @Override    public void updateEvent(int idToUpdate, Event updatedEvent) {        for (int i = 0; i < events.size(); i++) {            if (events.get(i).getEventId() == idToUpdate) {                events.set(i, updatedEvent);                break;            }        }    }    @Override    public boolean deleteEvent(int eventId) {        return events.removeIf((event) -> event.getEventId() == eventId);    }    @Override    public List<Event> findEventsByName(String name) {        return events.stream()                .filter((event) -> event.getEventName().equals(name))                .collect(Collectors.toList());    }    public Event findEventById(int id) {        return events.stream()                .filter((event) -> event.getEventId() == id)                .findFirst()                .orElse(null);    }    @Override    public List<Event> listAllEvents() {        return events.stream()                .sorted(Comparator.comparing(Event::getEventName).thenComparing(Event::getEventId))                .toList();    }    @Override    public boolean saveToFile(String fileName) {        try (PrintWriter writer = new PrintWriter(fileName)) {            for (Event event : events) {                writer.println(event.getEventId() + "," +                        event.getEventName() + "," +                        event.getOrganizerId() + "," +                        event.getVenueId() + "," +                        event.getStartDate() + "," +                        event.getEndDate() + "," +                        event.getExpectedAttendees());            }        } catch (IOException e) {            return false;        }        return true;    }    public void runProgram() {        Validator validator = new Validator();        Scanner scanner = new Scanner(System.in);        initializeData();        program:        while (true) {            System.out.println("✨  Enter your option");            System.out.println("(1) Create an event");            System.out.println("(2) Display all events");            System.out.println("(3) Update an event");            System.out.println("(4) Delete an event");            System.out.println("(5) Find an event by name");            System.out.println("(6) Save an event to file");            System.out.println("(7) Exit");            String choice = scanner.nextLine();            switch (choice) {                case "1" -> {                    Event newEvent = validator.inputNewEvent(events, organizers, venues);                    createEvent(newEvent);                }                case "2" -> { System.out.println(listAllEvents()); }                case "3" -> {                    int idToUpdate = validator.inputLooseEventId("update");                    Event existingEvent = findEventById(idToUpdate);                    if (existingEvent != null) {                        Event updatedEvent = validator.inputUpdatedEvent(events, organizers, venues, existingEvent);                        updateEvent(idToUpdate, updatedEvent);                        System.out.println("✅ Event updated successfully.");                    } else {                        System.out.println("❌ Event not found.");                    }                }                case "4" -> {                    int idToDelete = validator.inputLooseEventId("delete");                    if (deleteEvent(idToDelete)) {                        System.out.println("✅ Event deleted successfully.");                    } else {                        System.out.println("❌ Event not found.");                    }                }                case "5" -> {                    System.out.println("✋ Enter event name to search:");                    String nameToSearch = scanner.nextLine();                    List<Event> foundEvents = findEventsByName(nameToSearch);                    if (!foundEvents.isEmpty()) {                        foundEvents.forEach(System.out::println);                    } else {                        System.out.println("❌ Event not found.");                    }                }                case "6" -> {                    System.out.println("✋ Enter the file name to save to:");                    String fileName = scanner.nextLine();                    if (saveToFile(fileName)) {                        System.out.println("✅ Events saved to " + fileName + ".CSV");                    } else {                        System.out.println("❌ Error saving file.");                    }                }                case "7" -> {                    System.out.println("Exited!");                    break program;                }                default -> System.out.println("❌ Invalid option.");            }        }    }    public static void main(String[] args) {        EventManagement eventManagement = new EventManagement();        eventManagement.initializeData();        eventManagement.runProgram();    }    private void initializeData() {        organizers = new ArrayList<>();        organizers.add(new Organizer(1, "Svelte Syphon"));        organizers.add(new Organizer(2, "React Ravenous Rues"));        organizers.add(new Organizer(3, "Express Etchers"));        organizers.add(new Organizer(4, "Axios Avengers"));        organizers.add(new Organizer(5, "Spring Semaphores"));        organizers.add(new Organizer(6, "Mongo Muppet Co."));        organizers.add(new Organizer(7, "Socket Soup Bowls"));        venues = new ArrayList<>();        venues.add(new Venue(1, "Pablo Escobar"));        venues.add(new Venue(2, "Patient Saint Pim"));        venues.add(new Venue(3, "Simon Petrikov"));        venues.add(new Venue(4, "Marceline Albadeer"));        venues.add(new Venue(5, "Finn Mertens"));        venues.add(new Venue(6, "Fiona Campbell"));        venues.add(new Venue(7, "Lady Rainicorn"));    }}