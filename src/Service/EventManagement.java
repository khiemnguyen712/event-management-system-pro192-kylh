package Service;import Model.Event;import Model.Organizer;import Model.Venue;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.List;import java.util.Scanner;public class EventManagement implements EventOperations {    private ArrayList<Event> events;    private ArrayList<Organizer> organizers;    private ArrayList<Venue> venues;    private final Scanner superScanner = new Scanner(System.in);    public EventManagement(ArrayList<Event> events, ArrayList<Organizer> organizers, ArrayList<Venue> venues) {        this.events = events;        this.organizers = organizers;        this.venues = venues;    }    @Override    public void createEvent(Event event) {        this.events.add(event);    }    @Override    public void updateEvent(int eventId, Event event) {    }    @Override    public boolean deleteEvent(int eventId) {        return events.removeIf(event -> event.getEventId() == eventId);    }    @Override    public List<Event> findEventsByName(String name) {        return List.of();    }    @Override    public List<Event> listAllEvents() {        return events;    }    @Override    public void saveToFile(String fileName) {        try (PrintWriter writer = new PrintWriter(fileName)) {            for (Event event : events) {                writer.println(event.getEventId() + "," +                        event.getEventName() + "," +                        event.getOrganizerId() + "," +                        event.getVenueId() + "," +                        event.getStartDate() + "," +                        event.getEndDate() + "," +                        event.getExpectedAttendees());            }            System.out.println("✅ Events saved to " + fileName);        } catch (IOException e) {            System.out.println("❌ Error saving to CSV: " + e.getMessage());        }    }}